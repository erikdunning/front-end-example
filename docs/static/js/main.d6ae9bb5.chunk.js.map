{"version":3,"sources":["components/ItemList.tsx","api/items.ts","App.tsx","hooks/useItemList.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemList","React","memo","items","useState","open","setOpen","handleClick","useCallback","event","listId","parseInt","currentTarget","getAttribute","includes","filter","id","concat","listItems","forEach","item","index","push","ListItem","button","ListItemText","primary","name","secondary","groupedListItems","key","data-list-id","onClick","length","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","url","a","fetch","resp","json","filteredItems","filterItemsByName","filteredAndSortedItems","sortItemsByListIdThenName","sortedItems","computedName","sort","b","map","nameFilters","theme","createMuiTheme","palette","type","App","itemList","setItemList","useEffect","console","error","useItemList","ThemeProvider","CssBaseline","Container","maxWidth","Typography","variant","color","gutterBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4SAQaA,EAAWC,IAAMC,MAAK,YAAmC,IAAhCC,EAA+B,EAA/BA,MAA+B,EAC3CC,mBAAmB,IADwB,mBAC5DC,EAD4D,KACtDC,EADsD,KAM7DC,EAAcC,uBAClB,SAACC,GAGC,IAAMC,EAASC,SACbF,EAAMG,cAAcC,aAAa,iBAAmB,IAGlDH,IACEL,EAAKS,SAASJ,GAChBJ,EAAQD,EAAKU,QAAO,SAACC,GAAD,OAAQA,IAAON,MAEnCJ,EAAQD,EAAKY,OAAOP,OAI1B,CAACL,IAKGa,EAA+C,GACrDf,EAAMgB,SAAQ,SAACC,EAAYC,GACnBD,EAAKV,UAAUQ,IACnBA,EAAUE,EAAKV,QAAU,IAE3BQ,EAAUE,EAAKV,QAAQY,KACrB,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CACEC,QAAO,mBAAcN,EAAKV,OAAnB,cAA+BU,EAAKO,MAC3CC,UAAS,mBAAcR,EAAKJ,OAHVK,OAU1B,IAAMQ,EAAmC,GACzC,IAAK,IAAMC,KAAOZ,EAAW,CAC3B,IAAMR,EAASC,SAASmB,GAIxBD,EAAiBP,KACf,eAACC,EAAA,EAAD,CACEC,QAAM,EAENO,eAAcrB,EACdsB,QAASzB,EAJX,UAME,cAACkB,EAAA,EAAD,CACEC,QAAO,eAAUhB,EAAV,cAAsBQ,EAAUY,GAAKG,OAArC,YAER5B,EAAKS,SAASJ,GAAU,cAACwB,EAAA,EAAD,IAAiB,cAACC,EAAA,EAAD,MAT5C,oBAEoBzB,KAatBmB,EAAiBP,KACf,cAACc,EAAA,EAAD,CACEC,GAAIhC,EAAKS,SAASJ,GAElB4B,QAAQ,OACRC,eAAa,EAJf,SAME,cAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,gBAAc,EAApC,SACGxB,EAAUY,MAPf,mBAEmBpB,KAWvB,OAAO,cAAC8B,EAAA,EAAD,CAAMC,UAAU,MAAhB,SAAuBZ,O,iCCpFzB,SAAeX,EAAtB,kC,4CAAO,WAAyByB,GAAzB,qBAAAC,EAAA,sEACcC,MAAMF,GADpB,cACCG,EADD,gBAEeA,EAAKC,OAFpB,cAEC5C,EAFD,OAGC6C,EAAgBC,EAAkB9C,GAClC+C,EAAyBC,EAA0BH,GAJpD,kBAKEE,GALF,4C,sBAUP,SAASC,EAA0BhD,GAGjC,IAHgD,EAG1CiD,EAGA,GAN0C,cAS7BjD,GAT6B,IAShD,2BAA0B,CAAC,IAAhBiB,EAAe,QACxBgC,EAAY9B,KAAK,CACf+B,aAAa,GAAD,OAAKjC,EAAKV,QAAV,OAAmBU,EAAKO,MACpCP,UAZ4C,8BA0BhD,OARAgC,EAAYE,MAAK,SAACV,EAAGW,GAAJ,OACfX,EAAES,aAAeE,EAAEF,cACd,EACDT,EAAES,aAAeE,EAAEF,aACnB,EACA,KAGCD,EAAYI,KAAI,SAACpC,GAAD,OAAUA,EAAKA,QAIxC,SAAS6B,EAAkB9C,GAA0C,IAA3BsD,EAA0B,uDAAZ,CAAC,GAAI,MAC3D,OAAOtD,EAAMY,QAAO,SAACK,GAAD,OAAiBqC,EAAY3C,SAASM,EAAKO,SCrCjE,IAAM+B,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UA6BKC,MAzBf,WAEE,IAAM3D,ECXD,SAAqBwC,GAAc,IAAD,EACPvC,mBAAiB,IADV,mBAChC2D,EADgC,KACtBC,EADsB,KAcvC,OAXAC,qBAAU,WACR,sBAAC,4BAAArB,EAAA,+EAEuB1B,EAAUyB,GAFjC,OAESxC,EAFT,OAGG6D,EAAY7D,GAHf,gDAKG+D,QAAQC,MAAR,MALH,wDAAD,KAQC,CAACxB,IAEGoB,EDHOK,CACZ,qDAIF,OACE,eAACC,EAAA,EAAD,CAAeX,MAAOA,EAAtB,UACE,cAACY,EAAA,EAAD,IACA,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,MAAM,cACNlC,UAAU,KACVmC,cAAY,EAJd,+BAQA,cAAC5E,EAAD,CAAUG,MAAOA,WElBV0E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d6ae9bb5.chunk.js","sourcesContent":["import React, { useState, useCallback, ReactElement, MouseEvent } from \"react\";\nimport { Collapse, List, ListItem, ListItemText } from \"@material-ui/core\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\n\nimport { Item } from \"../types\";\n\n// Memoize as the item properties will frequently remain constant while render\n// may be called frequently.\nexport const ItemList = React.memo(({ items }: { items: Item[] }) => {\n  const [open, setOpen] = useState<number[]>([]); // Stores the list of \"open\" listIds\n\n  // A memoized callback is configured to reduce the number of allocations\n  // required as we likely don't want to instantiate a new function every time\n  // the componenet is rendered.\n  const handleClick = useCallback(\n    (event: MouseEvent) => {\n      // Retrieve the listId stored on the element itself\n      // (this allows us to have one function respond to N elements rather than having N fucntion bindings.)\n      const listId = parseInt(\n        event.currentTarget.getAttribute(\"data-list-id\") || \"\"\n      );\n      // Filter out the id if it currently exists in the \"open\" list, otherwise append it\n      if (listId) {\n        if (open.includes(listId)) {\n          setOpen(open.filter((id) => id !== listId));\n        } else {\n          setOpen(open.concat(listId));\n        }\n      }\n    },\n    [open]\n  );\n\n  // ListItem ReactElements for each item are grouped together by corresponding\n  // listId following the natural order they appear in the input.\n  const listItems: { [key: number]: ReactElement[] } = {};\n  items.forEach((item: Item, index: number) => {\n    if (!(item.listId in listItems)) {\n      listItems[item.listId] = [];\n    }\n    listItems[item.listId].push(\n      <ListItem button key={index}>\n        <ListItemText\n          primary={`List ID: ${item.listId} - ${item.name}`}\n          secondary={`Item ID: ${item.id}`}\n        />\n      </ListItem>\n    );\n  });\n\n  // Create the final nested list structure\n  const groupedListItems: ReactElement[] = [];\n  for (const key in listItems) {\n    const listId = parseInt(key);\n\n    // The list ids form the \"outer\" list to make jumping around the results\n    // a bit more intuitive.\n    groupedListItems.push(\n      <ListItem\n        button\n        key={`list-item-${listId}`}\n        data-list-id={listId}\n        onClick={handleClick}\n      >\n        <ListItemText\n          primary={`List ${listId} - ${listItems[key].length} Items`}\n        />\n        {open.includes(listId) ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n    );\n\n    // The Collapse elements remain hidden until the user clicks on the\n    // listId to expand it. These contain the sorted listItems.\n    groupedListItems.push(\n      <Collapse\n        in={open.includes(listId)}\n        key={`collapse-${listId}`}\n        timeout=\"auto\"\n        unmountOnExit\n      >\n        <List component=\"div\" disablePadding>\n          {listItems[key]}\n        </List>\n      </Collapse>\n    );\n  }\n\n  return <List component=\"nav\">{groupedListItems}</List>;\n});\n","import { Item } from \"../types\";\n\n// Fetches the item url and processes the results.\nexport async function listItems(url: string): Promise<Item[]> {\n  const resp = await fetch(url);\n  const items = await resp.json();\n  const filteredItems = filterItemsByName(items);\n  const filteredAndSortedItems = sortItemsByListIdThenName(filteredItems);\n  return filteredAndSortedItems;\n}\n\n// Sorts the list if items by listId and then their name using a memory inefficient, but\n// simple to follow sorting mechanism.\nfunction sortItemsByListIdThenName(items: Item[]) {\n\n  // A temporary object structure to represent the unique set of listIds and names.\n  const sortedItems: {\n    computedName: string;\n    item: Item;\n  }[] = [];\n\n  // Compute the properties for the object.\n  for (const item of items) {\n    sortedItems.push({\n      computedName: `${item.listId}${item.name}`,\n      item,\n    });\n  }\n\n  // Sort the array of objects using the computedName to give a natural sorting order\n  // while respecting both values, in order.\n  sortedItems.sort((a, b) =>\n    a.computedName < b.computedName\n      ? -1\n      : a.computedName > b.computedName\n      ? 1\n      : 0\n  );\n\n  return sortedItems.map((item) => item.item);\n}\n\n// Removes items by examining the name field and excluding those with \"\" or null values.\nfunction filterItemsByName(items: Item[], nameFilters = [\"\", null]) {\n  return items.filter((item: Item) => !nameFilters.includes(item.name));\n}\n","import React from \"react\";\nimport { Container, Typography, CssBaseline } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\n\nimport { ItemList } from \"./components\";\nimport { useItemList } from \"./hooks\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nfunction App() {\n  // Loads the item list using a React hook from an arbitrary location using an async fetch request.\n  const items = useItemList(\n    \"https://fetch-hiring.s3.amazonaws.com/hiring.json\"\n  );\n\n  // Some simple formatting boilerplate to make it look nicer.\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Typography\n          variant=\"h4\"\n          color=\"textPrimary\"\n          component=\"h1\"\n          gutterBottom\n        >\n          Front-End Example\n        </Typography>\n        <ItemList items={items} />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\nimport { Item } from \"../types\";\nimport { listItems } from \"../api\";\n\nexport function useItemList(url: string) {\n  const [itemList, setItemList] = useState<Item[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const items = await listItems(url);\n        setItemList(items);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, [url]);\n\n  return itemList;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}